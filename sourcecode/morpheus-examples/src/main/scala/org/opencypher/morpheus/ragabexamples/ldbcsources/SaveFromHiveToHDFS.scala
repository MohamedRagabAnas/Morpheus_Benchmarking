/*
 * Copyright (c) 2016-2019 "Neo4j Sweden, AB" [https://neo4j.com]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Attribution Notice under the terms of the Apache License 2.0
 *
 * This work was created by the collective efforts of the openCypher community.
 * Without limiting the terms of Section 6, any Derivative Work that is not
 * approved by the public consensus process of the openCypher Implementers Group
 * should not be described as “Cypher” (and Cypher® is a registered trademark of
 * Neo4j Inc.) or as "openCypher". Extensions by implementers or prototypes or
 * proposals for change that have been documented or implemented should only be
 * described as "implementation extensions to Cypher" or as "proposed changes to
 * Cypher that are not yet approved by the openCypher community".
 */
package org.opencypher.morpheus.ragabexamples.ldbcsources

import java.io.File
import java.nio.file.Files
import java.util.UUID

import org.apache.spark.SparkConf
import org.apache.spark.sql.SparkSession
import org.opencypher.morpheus.api.io.sql.SqlDataSourceConfig.Hive
import org.opencypher.morpheus.api.{GraphSources, MorpheusSession}
import org.opencypher.morpheus.testing.utils.FileSystemUtils._
import org.opencypher.morpheus.util.{App, LdbcUtil}
import org.opencypher.okapi.api.graph.Namespace


/**
  * This demo reads data generated by the LDBC SNB data generator and performs the following steps:
  *
  * 1) Loads the raw CSV files into Hive tables
  * 2) Normalizes tables according to the LDBC schema (i.e. place -> [City, Country, Continent]
  * 3) Generates a Graph DDL script based on LDBC naming conventions (if not already existing)
  * 4) Initializes a SQL PGDS based on the generated Graph DDL file
  * 5) Runs a Cypher query over the LDBC graph in Spark
  *
  * More detail about the LDBC SNB data generator are available under https://github.com/ldbc/ldbc_snb_datagen
  */
object SaveFromHiveToHDFS extends App {

  implicit val resourceFolder: String = "/ldbc"
  val datasourceName = "warehouse"
  val database = "LDBC"
  val warehouseLocation = "hdfs://hadoop-master:9000/user/hive/warehouse"
 // 1) Create Morpheus session
  val conf = new SparkConf(true)
  conf.set("spark.sql.codegen.wholeStage", "true")
  conf.set("spark.sql.shuffle.partitions", "12")
  conf.set("spark.default.parallelism", "8")
  //conf.set("spark.jars", "/home/centos/Morpheus/morpheus-master/morpheus-examples/build/libs/morpheus-examples-0.4.3-SNAPSHOT.jar")
println("Conf created ")

  implicit val spark = SparkSession
    .builder()
    .config(conf)
    .master("spark://172.17.67.122:7077")
    .config("spark.sql.warehouse.dir", warehouseLocation)
    .config("hive.metastore.uris","thrift://172.17.67.122:9083")
    .appName(s"morpheus-local-${UUID.randomUUID()}")
    .enableHiveSupport()
    .getOrCreate()
  spark.sparkContext.setLogLevel("error")

  println("Spark Session created ")

  implicit val session: MorpheusSession = MorpheusSession.create(spark)

  val csvFiles = new File(resource("csv/").getFile).list()

  // generate GraphDdl file
  val graphDdlString = LdbcUtil.toGraphDDL(datasourceName, database)
  val graphDdlFile = Files.createTempFile("ldbc", ".ddl").toFile.getAbsolutePath
  writeFile(graphDdlFile, graphDdlString)

  // create SQL PGDS
  val sqlGraphSource = GraphSources
    .sql(graphDdlFile)
    .withSqlDataSourceConfigs(datasourceName -> Hive)

  session.registerSource(Namespace("sql"), sqlGraphSource)
  val graph= session.catalog.graph("sql.LDBC")


  // Write (store) the created graph to HDFS->CSV format.

  val csvPgds = GraphSources.fs("hdfs://172.17.67.122:9000/user/hadoop/Morpheus/csv").csv
  session.registerSource(Namespace("myLDBCGraphNSHDFSCSV"), csvPgds)
  session.catalog.store("myLDBCGraphNSHDFSCSV.myLDBCGraphHDFSCSV", graph)





  // Write (store) the created graph to HDFS->Parquet format.

  val parquetPgds = GraphSources.fs("hdfs://172.17.67.122:9000/user/hadoop/Morpheus/parquet").parquet
  session.registerSource(Namespace("myLDBCGraphNSHDFSParquet"), parquetPgds)
  session.catalog.store("myLDBCGraphNSHDFSParquet.myLDBCGraphParquet", graph)


  // Write (store) the created graph to HDFS->ORC format.


  val orcPgds = GraphSources.fs("hdfs://172.17.67.122:9000/user/hadoop/Morpheus/orc").orc
  session.registerSource(Namespace("myLDBCGraphNSHDFSORC"), orcPgds)
  session.catalog.store("myLDBCGraphNSHDFSORC.myLDBCGraphORC", graph)
}